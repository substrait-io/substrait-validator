name: mask-ref
plan:
  __test: [ level: i ]
  version: { producer: validator-test }
  relations:
  - rel:
      project:
        input:
          read:
            common:
              direct: {}
            baseSchema:
              names: [a, b, c, d, x, y, e]
              struct:
                nullability: NULLABILITY_REQUIRED
                types:
                - bool: { nullability: NULLABILITY_REQUIRED }
                - i8: { nullability: NULLABILITY_REQUIRED }
                - list:
                    nullability: NULLABILITY_REQUIRED
                    type: { i16: { nullability: NULLABILITY_REQUIRED } }
                - struct:
                    nullability: NULLABILITY_REQUIRED
                    types:
                    - i32: { nullability: NULLABILITY_REQUIRED }
                    - i64: { nullability: NULLABILITY_REQUIRED }
                - map:
                    nullability: NULLABILITY_REQUIRED
                    key: { string: { nullability: NULLABILITY_REQUIRED } }
                    value: { date: { nullability: NULLABILITY_REQUIRED } }
            namedTable:
              names:
              - test
        expressions:
        - selection:
            rootReference: {}
            maskedReference:
              select:
                structItems:
                - field: 0
                - field: 4
                  child:
                    map:
                      key:
                        mapKey: key
                        __test:
                        - diag: { level: e, code: 1 }
                        - diag: { level: w, code: 1 }
                - field: 3
                  child:
                    struct:
                      structItems:
                      - field: 1
                - field: 2
                  child:
                    list:
                      selection:
                      - item: { field: -1 }
                      - slice: { start: 3, end: -2 }
                - field: 5
                  field__test: [ diag: { level: e, code: 2, msg: "*out of range*" } ]
            __test: [ type: "STRUCT<boolean, MAP<string, date>, STRUCT<i64>, LIST<i16>, !>" ]
        - selection:
            rootReference: {}
            maskedReference:
              select: []
            __test: [ type: "STRUCT<>" ]
        - selection:
            rootReference: {}
            maskedReference:
              select:
                structItems:
                - field: 3
                  child:
                    struct:
                      structItems:
                      - field: 1
            __test: [ type: "STRUCT<i64>" ]
        - selection:
            rootReference: {}
            maskedReference:
              maintainSingularStruct: true
              select:
                structItems:
                - field: 3
                  child:
                    struct:
                      structItems:
                      - field: 1
            __test: [ type: "STRUCT<STRUCT<i64>>" ]
        - selection:
            rootReference: {}
            maskedReference:
              select:
                structItems:
                - field: 2
                  child:
                    map:
                      __test: [ diag: { level: e, code: 4005, msg: "*requires a map*LIST*" } ]
                      key:
                        mapKey: key
                        __test:
                        - diag: { level: e, code: 1 }
                        - diag: { level: w, code: 1 }
                - field: 0
                  child:
                    struct:
                      __test: [ diag: { level: e, code: 4005, msg: "*requires a struct*boolean*" } ]
                      structItems: []
                - field: 4
                  child:
                    list:
                      __test: [ diag: { level: e, code: 4005, msg: "*requires a list*MAP*" } ]
                      selection:
                      - item: { field: -1 }
